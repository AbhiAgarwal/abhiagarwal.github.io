<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>abhicodes</title>
    <link>http://code.abhi.co/</link>
    <description>Recent content on abhicodes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Jan 2016 14:19:00 +0700</lastBuildDate>
    <atom:link href="http://code.abhi.co/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using CircleCI to automate builds</title>
      <link>http://code.abhi.co/circleci/</link>
      <pubDate>Sun, 10 Jan 2016 14:19:00 +0700</pubDate>
      
      <guid>http://code.abhi.co/circleci/</guid>
      <description>&lt;p&gt;Using Continuous Integration has shown to be incredibly powerful - especially when you combine it with Github/Bitbucket/any version control platform. CircleCI/TravisCI/Jenkins and any other CI frameworks allow programmers to automatically deploy, and test their code on a &lt;strong&gt;clean environment&lt;/strong&gt;. The clean environment part is important as sometimes programmers have different dependencies on their own machines and on their servers. This becomes a problem as it breaks deployments, and causes programming errors in the future. The CI platforms give programmers the ability to test their code in a controlled environment before deploying it onto their own servers. The CI platforms takes care of installing the dependencies programmatically on this staging server, and in a way it acts as a middleman.&lt;/p&gt;

&lt;p&gt;Even if you are building a library it becomes useful as you can run your tests and make sure your library builds under this clean environment. As you get more collaborators for your projects you can make sure the additions they make run in this environment and not just on their own computers.&lt;/p&gt;

&lt;p&gt;This is just one benefit CI platforms have. There’s a ton of benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automate builds and deployment.&lt;/li&gt;
&lt;li&gt;Running tests (bug detection!)&lt;/li&gt;
&lt;li&gt;Everyone is able to monitor the builds.&lt;/li&gt;
&lt;li&gt;Metrics can be generated on how long builds take, how complex the code is, and many other things. It helps make it easy to notice what the flaws in the process are.&lt;/li&gt;
&lt;li&gt;It’s ruthless because the task is being done by the machine. If it encounters an error in the build it’ll halt rather than deploying it anyways.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s also costs associated with CI platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usually rely on a complex platform. This reduces flexibility over using &lt;a href=&#34;http://fabfile.org/&#34;&gt;Fabric&lt;/a&gt; or some other method of deployment (they can also be used in conjunction).&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You don’t always have complete control over all the packages that they install. They use their own base image for the OS that you can’t overwrite (can be solved if you use Jenkins or any other CI solution in-house).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It’s expensive if you want parallelism or any type of extra features.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s incredibly simple to get started with a CI platform as well! CircleCI is one I love using because it’s easy to get started + they allow developers to use private repositories (rather than TravisCI where you have to pay for a private repository). &lt;/p&gt;

&lt;p&gt;To get started you can go on &lt;a href=&#34;http://circleci.com&#34;&gt;circleci.com&lt;/a&gt; and login through your Github (or Bitbucket, etc). Then you can just add the repositories you want to add CircleCI to by visiting the “Add Projects” section. Now your repository to be built automatically when you push any new commits to it on Github. Before you start pushing code - you’ve to do one final thing. You’ve to add a file called circle.yml. This file tells CircleCI what it’s supposed to do when you push to the master branch of your repository.&lt;/p&gt;

&lt;p&gt;An example of a circle.yml file is below:
&lt;script src=&#34;https://gist.github.com/AbhiAgarwal/ce90915c99120a986a7e.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is a simple circle.yml document that builds a jekyll website and then uploads it to Rackspace Cloud Files. Let’s look through the code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The general section at the top is to give CircleCI information about your branches and many other settings. &lt;/li&gt;
&lt;li&gt;The machine setting tells CircleCI which timezone, OS, programming language versions (etc) you want to use. These are settings on how it should spin up the virtual machine.&lt;/li&gt;
&lt;li&gt;The next is dependencies. It tells CircleCI the software dependencies you need to install. There’s 3 settings within dependencies: pre, overwrite, and post. We’re using post in this script which means install these gems after CircleCI has ran it’s own dependency commands. Pre is before CircleCI runs it’s own dependency commands, and overwrite basically means run these instead of CircleCI’s. &lt;/li&gt;
&lt;li&gt;The test section is just to tell CircleCI how to run your tests!&lt;/li&gt;
&lt;li&gt;The last is deployment. You can tell CircleCI how to deploy each of the branches you want CircleCI to run on. Here I’m using &lt;a href=&#34;https://github.com/cloudnull/turbolift&#34;&gt;turbolift&lt;/a&gt; to upload files to Rackspace Cloud Files. The values starting with $ are just environment variables that you’re able to set through the Project Settings section of CircleCI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s more documentation &lt;a href=&#34;https://circleci.com/docs/configuration&#34;&gt;here&lt;/a&gt;. You can do a lot using CircleCI. They have a lot of interesting documentation. I’ve used it for all sorts of scenarios. You can run node scripts, python scripts, and automate pretty much anything that you can do through your command line. I have also added some examples of circle.yml files (that we use in production at &lt;a href=&#34;http://github.com/techatnyu&#34;&gt;Tech@NYU&lt;/a&gt;) &lt;a href=&#34;https://gist.github.com/AbhiAgarwal/6e45a81375cf6d3eddf9&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Small code optimizations</title>
      <link>http://code.abhi.co/small-optimizations/</link>
      <pubDate>Fri, 20 Mar 2015 14:19:00 +0700</pubDate>
      
      <guid>http://code.abhi.co/small-optimizations/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a lot of optimizations that are done by the compiler at compile time. Here are a couple of them! Some compilers do these optimizations and some don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Strength_reduction&#34;&gt;Strength reduction&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Strength reduction optimizations usually take place in a loop. It usually looks for expression involving a loop invariant and an induction variable. Sometimes these operations can be simplified.&lt;/p&gt;

&lt;p&gt;Strength reduction could be replacing X with Y in a piece of code. For example, replacing a multiplication with an addition. The point is to simplify a more complex expression (multiplication) with an addition expression.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Loop_invariant&#34;&gt;loop invariable&lt;/a&gt;&lt;/strong&gt; in compiler design are values that do not change within the scope of the loop.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Induction_variable&#34;&gt;induction variable&lt;/a&gt;&lt;/strong&gt; in compiler design is a variable that always gets increased or decreased by the same amount each time the loop iterates. When you have a particular loop for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (i = 0; i &amp;lt; N; i++)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the variable i is always an induction variable. Induction variables can be said to be the values that are being iterated and changed every time the loop iterates.&lt;/p&gt;

&lt;p&gt;The following example is taken from Wikipedia. Lets say we have a program with a constant c, an array y, and a bound N. We have setup a loop that has a the loop counter i and is bounded by N. Each time we are setting the index i of array y by the constant multiplied by i.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c = 8;
for (i = 0; i &amp;lt; N; i++)
{
    y[i] = c * i;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the loop invariant is c, and the induction variable is i. The loop invariable is c because it&amp;rsquo;s a value set before the loop, and does not update in the scope of the loop. The induction variable is i because it&amp;rsquo;s the variable that is being iterated or changed at every iteration of the loop. I believe it can also be said that y[i] is an induction variable because it&amp;rsquo;s also being changed at each iteration of the loop, but we don&amp;rsquo;t need to make this statement (as you will see).&lt;/p&gt;

&lt;p&gt;When the strength is reduced for this particular block of code, it becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c = 8;
k = 0;
for (i = 0; i &amp;lt; N; i++)
{
    y[i] = k;
    k = k + c;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SSH tunnel</title>
      <link>http://code.abhi.co/ssh-tunnel/</link>
      <pubDate>Thu, 19 Mar 2015 14:19:00 +0700</pubDate>
      
      <guid>http://code.abhi.co/ssh-tunnel/</guid>
      <description>&lt;p&gt;SSH tunneling allows an individual to use their server as a proxy for their internet connection. This means that the bytes that you send and recieve from websites/servers will go through the server you&amp;rsquo;re using.&lt;/p&gt;

&lt;p&gt;The benefit of this is that it reduces the risk of your main computer being exposed as your IP becomes the servers IP, and all the requests to external websites/servers are made by the server rather than your computer. In addition, if you&amp;rsquo;re in an external country you&amp;rsquo;re able to use those servers to pretend like you&amp;rsquo;re in another country. For example, if I want to watch netflix and I&amp;rsquo;m currently in China then I&amp;rsquo;m able to setup a SSH tunnel through a server in the US to watch netflix.&lt;/p&gt;

&lt;p&gt;Basically the command is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -D 8080 -C -N username@servername
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have your SSH keys in the authorized_keys of your server then you&amp;rsquo;re set, but if you don&amp;rsquo;t then enter the password for the user. Keep this connection open - you should not expect any output right away.&lt;/p&gt;

&lt;p&gt;This will setup a proxy at port 8080 on your computer. The username is usually root for your server, but can be replaced if you created a new user. The servername is usually the IP of your server or the domain name. For example, my username@servername could be abhi@abhi.co where abhi is the username and abhi.co is the servername. Your hostname could be 28.254.39.67.&lt;/p&gt;

&lt;p&gt;A sample command would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -D 8080 -C -N abhi@abhi.co
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is limited to Mac OSX. Go to System Preferences, Network, Wifi/Ethernet (depending on what you&amp;rsquo;re using to connect), Advanced, Proxy. Then turn on SOCKS Proxy with the details being 127.0.0.1:8080. This means that the input before the colon is 127.0.0.1, and the input after the colon is 8080.&lt;/p&gt;

&lt;p&gt;Some people have &lt;a href=&#34;https://chrome.google.com/webstore/detail/hola-better-internet/gkojfkhlekighikafcpjkiklfbnlmeio?hl=en&#34;&gt;Hola&lt;/a&gt; installed on Chrome. Disable this if you&amp;rsquo;re going to use the proxy with Chrome. Hola takes control of the proxy in Chrome when it&amp;rsquo;s enabled (it&amp;rsquo;s how it manages to connect you through different countries).&lt;/p&gt;

&lt;p&gt;This step is for Linux. You have to export your http_proxy variable in order for this to work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export http_proxy=&amp;quot;http://127.0.0.1:8080&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this in the command line.&lt;/p&gt;

&lt;p&gt;Now try and visit &lt;a href=&#34;http://whatismyip.com/&#34;&gt;whatismyip.com&lt;/a&gt;, and see if the IP reflects the IP of your server. Congrats! You&amp;rsquo;ve just setup a SSH tunnel :) Or run this command in the command line!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dig +short myip.opendns.com @resolver1.opendns.com
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Some linux shortcuts</title>
      <link>http://code.abhi.co/linux-shortcuts/</link>
      <pubDate>Wed, 18 Mar 2015 14:19:00 +0700</pubDate>
      
      <guid>http://code.abhi.co/linux-shortcuts/</guid>
      <description>&lt;p&gt;&lt;strong&gt;iptables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accepting a port:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[sudo] iptables -A INPUT -i eth0 -p tcp --sport 3000 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting up port routing using (from port 80 to 8000):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[sudo] iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deleting existing rules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[sudo] iptables -F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;get ip&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dig +short myip.opendns.com @resolver1.opendns.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or if you don&amp;rsquo;t have dig&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl eth0.me
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;speed test&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Run this command and test the KB/s:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget --output-document=/dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>